[{"/home/tmdev/Desktop/Final_Exam_Arman/react/src/index.js":"1","/home/tmdev/Desktop/Final_Exam_Arman/react/src/App.js":"2","/home/tmdev/Desktop/Final_Exam_Arman/react/src/UserTable/UserTable.js":"3","/home/tmdev/Desktop/Final_Exam_Arman/react/src/ChartData/Dashboard.js":"4"},{"size":198,"mtime":1685011084000,"results":"5","hashOfConfig":"6"},{"size":295,"mtime":1686291369498,"results":"7","hashOfConfig":"6"},{"size":3811,"mtime":1686292521293,"results":"8","hashOfConfig":"6"},{"size":4814,"mtime":1686292511353,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hgu7pm",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/tmdev/Desktop/Final_Exam_Arman/react/src/index.js",[],[],"/home/tmdev/Desktop/Final_Exam_Arman/react/src/App.js",[],[],"/home/tmdev/Desktop/Final_Exam_Arman/react/src/UserTable/UserTable.js",["24","25","26"],[],"import React, { useState, useEffect } from \"react\";\nimport { DataTable } from \"primereact/datatable\";\nimport { Column } from \"primereact/column\";\nimport { Button } from \"primereact/button\";\nimport \"primereact/resources/themes/lara-light-indigo/theme.css\";\nimport \"primereact/resources/primereact.min.css\";\n\nconst UsersTable = () => {\n  const [users, setUsers] = useState([]);\n  const [filteredUsers, setFilteredUsers] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [sortField, setSortField] = useState(\"\");\n  const [sortOrder, setSortOrder] = useState(1);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [usersPerPage] = useState(5);\n\n  const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" text />;\n  const paginatorRight = <Button type=\"button\" icon=\"pi pi-download\" text />;\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"/users\");\n      const data = await response.json();\n      setUsers(data);\n      setFilteredUsers(data);\n    };\n\n    fetchData();\n  }, []);\n\n  const handleSearch = (event) => {\n    const searchText = event.target.value.toLowerCase();\n    setSearchText(searchText);\n    filterUsers(searchText); \n    setCurrentPage(1);\n  };\n\n  const handleSort = (event) => {\n    const { field, order } = event.sort;\n    setSortField(field);\n    setSortOrder(order);\n    filterUsers(searchText, field, order);\n    setCurrentPage(1);\n  };\n\n  const filterUsers = (searchText) => {\n    let filteredData = users.filter((user) =>\n      user.name.toLowerCase().includes(searchText)\n    );\n\n    if (sortField) {\n      filteredData.sort((a, b) => {\n        const valueA = a[sortField].toLowerCase();\n        const valueB = b[sortField].toLowerCase();\n        if (valueA < valueB) {\n          return sortOrder === 1 ? -1 : 1;\n        }\n        if (valueA > valueB) {\n          return sortOrder === 1 ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n\n    setFilteredUsers(filteredData);\n  };\n\n  return (\n    <div className=\"users-table\">\n      <h3 className=\"table\">User Table</h3>\n      <DataTable\n        value={filteredUsers} // Use currentUsers instead of filteredUsers\n        paginator\n        rows={5}\n        rowsPerPageOptions={[5, 10, 25, 50]}\n        tableStyle={{ minWidth: \"50rem\" }}\n        paginatorTemplate=\"RowsPerPageDropdown FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\"\n        currentPageReportTemplate=\"{first} to {last} of {totalRecords}\"\n        paginatorLeft={paginatorLeft}\n        paginatorRight={paginatorRight}\n      >\n        <Column\n          sortable\n          style={{ width: \"10%\" }}\n          field=\"id\"\n          header=\"ID\"\n          sortField=\"id\"\n          sortOrder={sortField === \"id\" ? sortOrder : null}\n          onSort={handleSort}\n        ></Column>\n        <Column\n          sortable\n          style={{ width: \"30%\" }}\n          field=\"username\"\n          header=\"Username\"\n          sortField=\"username\"\n          sortOrder={sortField === \"username\" ? sortOrder : null}\n          onSort={handleSort}\n        ></Column>\n        <Column\n          sortable\n          style={{ width: \"10%\" }}\n          field=\"name\"\n          header=\"Name\"\n          sortField=\"name\"\n          sortOrder={sortField === \"name\" ? sortOrder : null}\n          onSort={handleSort}\n        ></Column>\n        <Column\n          sortable\n          style={{ width: \"15%\" }}\n          field=\"email\"\n          header=\"Email\"\n          sortField=\"email\"\n          sortOrder={sortField === \"email\" ? sortOrder : null}\n          onSort={handleSort}\n        ></Column>\n        <Column\n          sortable\n          style={{ width: \"10%\" }}\n          field=\"status\"\n          header=\"Status\"\n        ></Column>\n      </DataTable>\n    </div>\n  );\n};\n\nexport default UsersTable;\n","/home/tmdev/Desktop/Final_Exam_Arman/react/src/ChartData/Dashboard.js",["27"],[],"import { useEffect, useState } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"primereact/resources/themes/lara-light-indigo/theme.css\";\nimport \"primereact/resources/primereact.min.css\";\n\nconst Dashboard = () => {\n  // State variables\n  const [chart, setChart] = useState(\"column\"); // Current chart type\n  const [chartOptions, setChartOptions] = useState({}); // Chart options\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear()); // Selected year\n  const [usersData, setUsersData] = useState(null); // Data for users\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/users\");\n        const data = await response.json();\n        setUsersData(data);\n\n        // Filter data based on the selected year\n        const filteredData = data.filter((item) => {\n          const createdAtYear = new Date(item.created_at).getFullYear();\n          return createdAtYear === selectedYear;\n        });\n\n        const months = [\n          \"Jan\",\n          \"Feb\",\n          \"Mar\",\n          \"Apr\",\n          \"May\",\n          \"Jun\",\n          \"Jul\",\n          \"Aug\",\n          \"Sep\",\n          \"Oct\",\n          \"Nov\",\n          \"Dec\",\n        ];\n\n        // Generate categories and series data for the chart\n        const categories = months.map((month) => `${month}`);\n        const seriesData = months.map((month) => {\n          const monthData = filteredData.filter(\n            (item) =>\n              new Date(item.created_at).getMonth() === months.indexOf(month)\n          );\n          return monthData.length;\n        });\n\n        // Configure the chart options\n        const options = {\n          chart: {\n            type: chart,\n          },\n          title: {\n            text: \"Signed-up Users by Month\",\n          },\n          xAxis: {\n            categories: categories,\n          },\n          yAxis: {\n            title: {\n              text: \"User Count\",\n            },\n          },\n          series: [\n            {\n              name: \"Users\",\n              data: seriesData,\n              color: \"#016025\",\n            },\n          ],\n        };\n\n        setChartOptions(options);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, [selectedYear]);\n\n  // Event handler for year selection change\n  const handleYearChange = (event) => {\n    const selectedValue = parseInt(event.target.value);\n    setSelectedYear(selectedValue);\n  };\n\n  // Event handler for chart type selection change\n  const handleChartTypeChange = (event) => {\n    const selectedChartType = event.target.value;\n    setChartOptions((prevOptions) => ({\n      ...prevOptions,\n      chart: {\n        type: selectedChartType,\n      },\n    }));\n    setChart(event.target.value);\n  };\n\n  // Generate chart options for the pie chart\n  const generatePieChartOptions = () => {\n    if (!usersData) return null;\n\n    // Count the number of users in each status category\n    const activeUsers = usersData.filter((user) => user.status === \"active\").length;\n    const inactiveUsers = usersData.filter((user) => user.status === \"inactive\").length;\n    const disabledUsers = usersData.filter((user) => user.status === \"disabled\").length;\n\n    // Configure the chart options\n    const options = {\n      chart: {\n        type: \"pie\",\n      },\n      title: {\n        text: \"User Status\",\n      },\n      series: [\n        {\n          name: \"Status\",\n          data: [\n            { name: \"Active\", y: activeUsers },\n            { name: \"Inactive\", y: inactiveUsers },\n            { name: \"Disabled\", y: disabledUsers },\n          ],\n        },\n      ],\n    };\n\n    return options;\n  };\n\n  return (\n    <div>\n      <h2>Welcome to Dashboard</h2>\n      <br></br>\n      <div className=\"selection\">\n        <label htmlFor=\"year\">Select Year:</label>\n        <select id=\"year\" value={selectedYear} onChange={handleYearChange}>\n          <option value={2021}>2021</option>\n          <option value={2022}>2022</option>\n          <option value={2023}>2023</option>\n        </select>\n      </div>\n      <br></br>\n      <div className=\"selection\">\n        <label htmlFor=\"chartType\">Select Chart Type:</label>\n        <select id=\"chartType\" onChange={handleChartTypeChange}>\n          <option value=\"column\">Column Chart</option>\n          <option value=\"line\">Line Chart</option>\n        </select>\n      </div>\n      <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n      <div>\n        {usersData ? (\n          <HighchartsReact\n            highcharts={Highcharts}\n            options={generatePieChartOptions()}\n          />\n        ) : (\n          <div>Loading...</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n",{"ruleId":"28","severity":1,"message":"29","line":14,"column":10,"nodeType":"30","messageId":"31","endLine":14,"endColumn":21},{"ruleId":"28","severity":1,"message":"32","line":15,"column":10,"nodeType":"30","messageId":"31","endLine":15,"endColumn":22},{"ruleId":"28","severity":1,"message":"33","line":30,"column":9,"nodeType":"30","messageId":"31","endLine":30,"endColumn":21},{"ruleId":"34","severity":1,"message":"35","line":84,"column":6,"nodeType":"36","endLine":84,"endColumn":20,"suggestions":"37"},"no-unused-vars","'currentPage' is assigned a value but never used.","Identifier","unusedVar","'usersPerPage' is assigned a value but never used.","'handleSearch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chart'. Either include it or remove the dependency array.","ArrayExpression",["38"],{"desc":"39","fix":"40"},"Update the dependencies array to be: [chart, selectedYear]",{"range":"41","text":"42"},[2350,2364],"[chart, selectedYear]"]