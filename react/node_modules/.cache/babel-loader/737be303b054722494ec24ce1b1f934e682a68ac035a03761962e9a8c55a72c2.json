{"ast":null,"code":"var _jsxFileName = \"/home/tmdev/Desktop/Final_Exam_Arman/react/src/ChartData/Dashboard.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport \"primereact/resources/themes/lara-light-indigo/theme.css\";\nimport 'primereact/resources/primereact.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [chart, setChart] = useState('column');\n  const [chartOptions, setChartOptions] = useState({});\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const [usersData, setUsersData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:2525/users');\n        const data = await response.json();\n        setUsersData(data);\n        const filteredData = data.filter(item => {\n          const createdAtYear = new Date(item.created_at).getFullYear();\n          return createdAtYear === selectedYear;\n        });\n        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        const categories = months.map(month => `${month}`);\n        const seriesData = months.map(month => {\n          const monthData = filteredData.filter(item => new Date(item.created_at).getMonth() === months.indexOf(month));\n          return monthData.length;\n        });\n        const options = {\n          chart: {\n            type: chart\n          },\n          title: {\n            text: 'Signed-up Users by Month'\n          },\n          xAxis: {\n            categories: categories\n          },\n          yAxis: {\n            title: {\n              text: 'User Count'\n            }\n          },\n          series: [{\n            name: 'Users',\n            data: seriesData,\n            color: \"#016025\"\n          }]\n        };\n        setChartOptions(options);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [selectedYear]);\n  const handleYearChange = event => {\n    const selectedValue = parseInt(event.target.value);\n    setSelectedYear(selectedValue);\n  };\n  const handleChartTypeChange = event => {\n    const selectedChartType = event.target.value;\n    setChartOptions(prevOptions => ({\n      ...prevOptions,\n      chart: {\n        type: selectedChartType\n      }\n    }));\n    setChart(event.target.value);\n  };\n  const generatePieChartOptions = () => {\n    if (!usersData) return null;\n\n    // Count the number of users in each status category\n    const activeUsers = usersData.filter(user => user.status === 'active').length;\n    const inactiveUsers = usersData.filter(user => user.status === 'inactive').length;\n    const disabledUsers = usersData.filter(user => user.status === 'disabled').length;\n\n    // Configure the chart options\n    const options = {\n      chart: {\n        type: 'pie'\n      },\n      title: {\n        text: 'User Status'\n      },\n      series: [{\n        name: 'Status',\n        data: [{\n          name: 'Active',\n          y: activeUsers\n        }, {\n          name: 'Inactive',\n          y: inactiveUsers\n        }, {\n          name: 'Disabled',\n          y: disabledUsers\n        }]\n      }]\n    };\n    return options;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"year\",\n        children: \"Select Year:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"year\",\n        value: selectedYear,\n        onChange: handleYearChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: 2021,\n          children: \"2021\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 2022,\n          children: \"2022\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 2023,\n          children: \"2023\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"chartType\",\n        children: \"Select Chart Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"chartType\",\n        onChange: handleChartTypeChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"column\",\n          children: \"Column Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"line\",\n          children: \"Line Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: usersData ? /*#__PURE__*/_jsxDEV(HighchartsReact, {\n        highcharts: Highcharts,\n        options: generatePieChartOptions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"iHYI0xF3/PyD4fpNIS1mhc70H9g=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useEffect","useState","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","Dashboard","_s","chart","setChart","chartOptions","setChartOptions","selectedYear","setSelectedYear","Date","getFullYear","usersData","setUsersData","fetchData","response","fetch","data","json","filteredData","filter","item","createdAtYear","created_at","months","categories","map","month","seriesData","monthData","getMonth","indexOf","length","options","type","title","text","xAxis","yAxis","series","name","color","error","console","handleYearChange","event","selectedValue","parseInt","target","value","handleChartTypeChange","selectedChartType","prevOptions","generatePieChartOptions","activeUsers","user","status","inactiveUsers","disabledUsers","y","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","highcharts","_c","$RefreshReg$"],"sources":["/home/tmdev/Desktop/Final_Exam_Arman/react/src/ChartData/Dashboard.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport \"primereact/resources/themes/lara-light-indigo/theme.css\";\nimport 'primereact/resources/primereact.min.css';\n\nconst Dashboard = () => {\n    const [chart , setChart] = useState('column');\n    const [chartOptions, setChartOptions] = useState({});\n    const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n    const [usersData, setUsersData] = useState(null);\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch('http://localhost:2525/users');\n                const data = await response.json();\n                setUsersData(data);\n                const filteredData = data.filter((item) => {\n                    const createdAtYear = new Date(item.created_at).getFullYear();\n                    return createdAtYear === selectedYear;\n                });\n                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n                const categories = months.map((month) => `${month}`);\n                const seriesData = months.map((month) => {\n                    const monthData = filteredData.filter((item) => new Date(item.created_at).getMonth() === months.indexOf(month));\n                    return monthData.length;\n                });\n\n                const options = {\n                    chart: {\n                        type: chart,\n                    },\n                    title: {\n                        text: 'Signed-up Users by Month',\n                    },\n                    xAxis: {\n                        categories: categories,\n                    },\n                    yAxis: {\n                        title: {\n                            text: 'User Count',\n                        },\n                    },\n                    series: [\n                        {\n                            name: 'Users',\n                            data: seriesData,\n                            color: \"#016025\"\n                        },\n                    ],\n                };\n\n                setChartOptions(options);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n\n        fetchData();\n    }, [selectedYear]);\n\n    const handleYearChange = (event) => {\n        const selectedValue = parseInt(event.target.value);\n        setSelectedYear(selectedValue);\n    };\n\n    const handleChartTypeChange = (event) => {\n        const selectedChartType = event.target.value;\n        setChartOptions((prevOptions) => ({\n            ...prevOptions,\n            chart: {\n                type: selectedChartType,\n            },\n        }));\n        setChart(event.target.value)\n    };\n\n    const generatePieChartOptions = () => {\n        if (!usersData) return null;\n\n        // Count the number of users in each status category\n        const activeUsers = usersData.filter(user => user.status === 'active').length;\n        const inactiveUsers = usersData.filter(user => user.status === 'inactive').length;\n        const disabledUsers = usersData.filter(user => user.status === 'disabled').length;\n\n        // Configure the chart options\n        const options = {\n            chart: {\n                type: 'pie',\n            },\n            title: {\n                text: 'User Status',\n            },\n            series: [\n                {\n                    name: 'Status',\n                    data: [\n                        { name: 'Active', y: activeUsers },\n                        { name: 'Inactive', y: inactiveUsers },\n                        { name: 'Disabled', y: disabledUsers },\n                    ],\n                },\n            ],\n        };\n\n        return options;\n    }\n    return (\n    <div>\n        <div className='selection'>\n            <label htmlFor=\"year\">Select Year:</label>\n            <select id=\"year\" value={selectedYear} onChange={handleYearChange}>\n                <option value={2021}>2021</option>\n                <option value={2022}>2022</option>\n                <option value={2023}>2023</option>\n            </select>\n        </div>\n        <div>\n            <label htmlFor=\"chartType\">Select Chart Type:</label>\n            <select id=\"chartType\" onChange={handleChartTypeChange}>\n                <option value=\"column\">Column Chart</option>\n                <option value=\"line\">Line Chart</option>\n            </select>\n        </div>\n        <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n        <div>\n            {usersData ? (\n                <HighchartsReact highcharts={Highcharts} options={generatePieChartOptions()} />\n            ) : (\n                <div>Loading...</div>\n            )}\n        </div>\n    </div>\n\n    );\n}\n\n\nexport default Dashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}